00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/15/2020 1:08:36 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68k   Disassembler    
00000000                             3  * Written by :
00000000                             4  * Date       : 06/xx/2020    
00000000                             5  * Description: Final Project    
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  *_______Basic Print Out Welcome Message__________   
00001000  43F9 0000112B             12      LEA Mes_Welcome,    A1  
00001006  103C 000D                 13      MOVE.B  #13,    D0  
0000100A  4E4F                      14      TRAP    #15 
0000100C                            15      
0000100C                            16  *_______Get User Input____________________________
0000100C                            17  Get_Input_Start_ADR
0000100C  4282                      18      CLR.L   D2  
0000100E  4283                      19      CLR.L   D3
00001010                            20     
00001010  43F9 00001168             21      LEA Mes_Start_Adr,  A1  ; ask start loc
00001016  103C 000E                 22      MOVE.B  #14, D0   
0000101A  4E4F                      23      Trap    #15     
0000101C  43F9 00001252             24      LEA UserInput,  A1  ;   get user input  
00001022  103C 0002                 25      MOVE.B  #2, D0  
00001026  4E4F                      26      TRAP    #15 
00001028                            27   
00001028  4EB9 00001082             28      JSR ConvertInput        
0000102E                            29      * check if the address is odd then throw error just read right bit  
0000102E                            30      *ANDI.B  #1, D3  
0000102E  0803 0000                 31      BTST #0,    D3 * is Even?  
00001032  6600 00B8                 32      BNE Invalid * Not even then go to invalid        
00001036                            33      
00001036                            34      * Store user Input start address to A5
00001036  23C3 00001256             35      MOVE.L  D3, StartLocData
0000103C  2A79 00001256             36      MOVE.L  StartLocData, A5  
00001042                            37      
00001042                            38  *_________Check Start Adr is Even Number__________________
00001042                            39  
00001042                            40          
00001042                            41  Get_Input_End_ADR  
00001042  4282                      42      CLR.L   D2  
00001044  4283                      43      CLR.L   D3  
00001046                            44      
00001046  43F9 00001189             45      LEA Mes_End_Adr,    A1  ;   ask ending loc  
0000104C  103C 000E                 46      MOVE.B  #14,    D0       
00001050  4E4F                      47      TRAP    #15 
00001052                            48      
00001052  43F9 0000125A             49      LEA EndLocData, A1  ;   get user input  
00001058  103C 0002                 50      MOVE.B  #2, D0  
0000105C  4E4F                      51      Trap    #15 
0000105E                            52   
0000105E  4EB9 00001082             53      JSR ConvertInput    
00001064                            54      * Store user Input start address to A6  
00001064  23C3 0000125A             55      MOVE.L  D3, EndLocData
0000106A  2C79 0000125A             56      MOVE.L  EndLocData, A6  
00001070                            57      
00001070                            58  *________________________________________________________   
00001070                            59  *   Compare Starting Address and End Address see if it make sense    
00001070                            60  Check_Input_Address
00001070  4282                      61      CLR.L   D2  * clr out before use it 
00001072  4283                      62      CLR.L   D3  * clr out before use it 
00001074  240D                      63      MOVE.L  A5, D2  * move starting adr to d2 to check   
00001076  260E                      64      MOVE.L  A6, D3  * move ending adr to d3 to check    
00001078  B483                      65      CMP.L   D3, D2  * end address is not bigger than starting addr and address same? Error  
0000107A  6C00 008C                 66      BGE Invalid_Starting_Ending_Adr
0000107E                            67      
0000107E  6000 00A4                 68      BRA Finish  
00001082                            69      
00001082                            70  *_______End of User Input Adr______________________________ 
00001082                            71  *   Subroutine
00001082                            72  *_________________________________________________
00001082                            73  ConvertInput        
00001082  1419                      74         MOVE.B  (A1)+,  D2   
00001084  4EB9 0000109A             75         JSR    ConvertASCII
0000108A  D682                      76         ADD.L    D2, D3  * copy D2 to D3       
0000108C  0C11 0000                 77         CMPI.B   #$0,    (A1)    
00001090  6700 0006                 78         BEQ GoBack
00001094                            79         *LSL.B    #4, D2     
00001094                            80         *LSR.B    #4, D2    
00001094  E98B                      81         LSL.L    #4, D3  * Make room for next byte   
00001096                            82         *ADD.L    D2, D3 
00001096  60EA                      83         BRA  ConvertInput
00001098                            84  GoBack
00001098                            85          * trying on checking input length
00001098                            86          *CMP.W   #$0009, D3  
00001098                            87          *BGE  Input_Error_Handler  
00001098  4E75                      88          RTS    
0000109A                            89         *LSR.B    
0000109A                            90  ConvertASCII
0000109A  0C02 0030                 91          CMPI.B  #$30,   D2     * Any input that are less than 30 is error    
0000109E  6D00 0048                 92          BLT Input_Error_Handler
000010A2  0C02 0067                 93          CMPI.B  #$67,   D2    * Any input that are more or equal to 67 (g) is error 
000010A6  6C00 0040                 94          BGE Input_Error_Handler  
000010AA                            95          * 30~39 Number
000010AA                            96          * 41~46 Cap Letter Till F
000010AA                            97          * 61~66 Till f
000010AA  0C02 0039                 98          CMPI.B   #$39,   D2 * 40 is immeidate data use CMPI   
000010AE  6F00 0012                 99          BLE IsNumber * If less than 40 then execute  
000010B2                           100          *________________________________________________
000010B2  0C02 0040                101          CMPI.B  #$40,   D2  *   if it is between 3A (:) and 40 (@) throw Error   
000010B6  6F00 0030                102          BLE Input_Error_Handler
000010BA                           103          *_______________________________________________
000010BA  0C02 0041                104          CMPI.B  #$41,   D2  * if not compare with 41 (A)    
000010BE  6C00 0008                105          BGE IsLetter    *Bigger than or Equal to 41 then execute    
000010C2                           106  IsNumber
000010C2  0402 0030                107          SUB.B   #$30,   D2        
000010C6  4E75                     108          RTS 
000010C8                           109  IsLetter
000010C8                           110          * figure out either small leter or capital letter   
000010C8  0C02 0046                111          CMPI.B  #$46,   D2  * Compare with small letter F            
000010CC  6F00 0006                112          BLE CapitalLetter   * if less or equal to 46 than small letter     
000010D0  6000 0008                113          BRA SmallLetter     * else go to capital letter 
000010D4                           114  CapitalLetter   
000010D4                           115          *CMPI.B  #$40,   D2  
000010D4                           116          *BLE Input_Error_Handler 
000010D4  0402 0037                117          SUB.B   #$37,   D2   * 46 - 37 = F
000010D8  4E75                     118          RTS 
000010DA                           119  SmallLetter  
000010DA  0C02 0060                120          CMPI.B  #$60,   D2  * if less than or equal to 60 (') throw Error   
000010DE  6F00 0008                121          BLE Input_Error_Handler
000010E2  0402 0057                122          SUB.B   #$57,   D2    
000010E6  4E75                     123          RTS 
000010E8                           124          * tomorrow continue (less than 39) then subtract 30
000010E8                           125       
000010E8                           126  *_________________________Error Handle___________________________________      
000010E8                           127  Input_Error_Handler
000010E8  6000 0002                128          BRA Invalid 
000010EC                           129          
000010EC                           130  Invalid 
000010EC  43F9 00001128            131          LEA Extra_Space,    A1  
000010F2  103C 000E                132          MOVE.B  #14,    D0  
000010F6  4E4F                     133          TRAP    #15 
000010F8  43F9 000011A8            134          LEA Mes_Invalid, A1 
000010FE  103C 000E                135          MOVE.B  #14,    D0  
00001102  4E4F                     136          TRAP    #15 
00001104                           137          *MOVE.B  #9, D0    
00001104                           138          *TRAP    #15
00001104  6000 FF06                139          BRA  Get_Input_Start_ADR    
00001108                           140          
00001108                           141  Invalid_Starting_Ending_Adr
00001108  43F9 00001128            142          LEA  Extra_Space,   A1  
0000110E  103C 000E                143          MOVE.B  #14,    D0  
00001112  4E4F                     144          TRAP    #15 
00001114  43F9 00001212            145          LEA Mes_Starting_Ending_Adr_Error,  A1  
0000111A  103C 000E                146          MOVE.B  #14,    D0  
0000111E  4E4F                     147          TRAP    #15 
00001120  6000 FEEA                148          BRA Get_Input_Start_ADR
00001124                           149           
00001124  FFFF FFFF                150  Finish  SIMHALT             ; halt simulator
00001128                           151  
00001128                           152  *        RTS 
00001128                           153        
00001128                           154     
00001128                           155  
00001128                           156  * Put variables and constants here
00001128                           157  * Basic Print Message   
00001128                           158  *____________________________________________________________________
00001128  =0000000D                159  CR  EQU $0D     *   Carriage Return
00001128  =0000000A                160  LF  EQU $0A     *   Line Feed
00001128= 0D 0A 00                 161  Extra_Space DC.B    CR, LF, 0 
0000112B= 57 65 6C 63 6F 6D ...    162  Mes_Welcome     DC.B    'Welcome to Disassembler Program', CR,  LF
0000114C= 46 69 6E 61 6C 20 ...    163                              DC.B    'Final Project for CSS 422',    CR, LF, 0
00001168= 50 6C 65 61 73 65 ...    164  Mes_Start_Adr       DC.B    'Please Enter Starting Location: ', 0
00001189= 50 6C 65 61 73 65 ...    165  Mes_End_Adr     DC.B    'Please Enter Ending Location: ', 0
000011A8                           166  
000011A8= 54 68 65 20 41 64 ...    167  Mes_Invalid DC.B   'The Address You provided is Invalid', CR,  LF
000011CD= 54 65 72 6D 69 6E ...    168            DC.B 'Terminating Program.',  CR, LF, 0    
000011E4= 54 68 65 20 41 64 ...    169  Mes_EvenNumber_Error    DC.B    'The Address You provided is not even number',  CR, LF, 0
00001212= 59 6F 75 72 20 53 ...    170  Mes_Starting_Ending_Adr_Error   DC.B    'Your Starting Address is bigger or equal than Ending Adrress', CR, LF, 0   
00001251                           171    
00001251                           172  
00001251                           173  * Define Storage
00001251                           174  *_____________________________________________________________________
00001252                           175  UserInput   DS.L    1   
00001256                           176  StartLocData    DS.L    1   * store starting address
0000125A                           177  EndLocData  DS.L    1   *   Store ending address    
0000125E                           178  
0000125E                           179      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CAPITALLETTER       10D4
CHECK_INPUT_ADDRESS  1070
CONVERTASCII        109A
CONVERTINPUT        1082
CR                  D
ENDLOCDATA          125A
EXTRA_SPACE         1128
FINISH              1124
GET_INPUT_END_ADR   1042
GET_INPUT_START_ADR  100C
GOBACK              1098
INPUT_ERROR_HANDLER  10E8
INVALID             10EC
INVALID_STARTING_ENDING_ADR  1108
ISLETTER            10C8
ISNUMBER            10C2
LF                  A
MES_END_ADR         1189
MES_EVENNUMBER_ERROR  11E4
MES_INVALID         11A8
MES_STARTING_ENDING_ADR_ERROR  1212
MES_START_ADR       1168
MES_WELCOME         112B
SMALLLETTER         10DA
START               1000
STARTLOCDATA        1256
USERINPUT           1252
