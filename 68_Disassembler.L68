00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/14/2020 8:59:29 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68k   Disassembler    
00000000                             3  * Written by :
00000000                             4  * Date       : 06/xx/2020    
00000000                             5  * Description: Final Project    
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  *_______Basic Print Out Welcome Message__________   
00001000  43F9 000010FE             12      LEA Mes_Welcome,    A1  
00001006  103C 000D                 13      MOVE.B  #13,    D0  
0000100A  4E4F                      14      TRAP    #15 
0000100C                            15      
0000100C                            16  *_______Get User Input____________________________
0000100C                            17  GetInputStartADR
0000100C  4282                      18      CLR.L   D2  
0000100E  4283                      19      CLR.L   D3
00001010                            20     
00001010  43F9 0000113B             21      LEA Mes_Start_Adr,  A1  ; ask start loc
00001016  103C 000E                 22      MOVE.B  #14, D0   
0000101A  4E4F                      23      Trap    #15     
0000101C                            24      *BRA Invalid 
0000101C  43F9 000011BA             25      LEA UserInput,  A1  ;   get user input  
00001022  103C 0002                 26      MOVE.B  #2, D0  
00001026  4E4F                      27      TRAP    #15 
00001028                            28      
00001028  4282                      29      CLR.L   D2  
0000102A  4283                      30      CLR.L   D3  
0000102C  4EB9 00001074             31      JSR ConvertInput        
00001032                            32      * Store user Input start address to A5
00001032  23C3 000011BE             33      MOVE.L  D3, StartLocData
00001038  2A79 000011BE             34      MOVE.L  StartLocData, A5  
0000103E                            35      
0000103E                            36          
0000103E                            37  GetInputEndADR  
0000103E  4282                      38      CLR.L   D2  
00001040  4283                      39      CLR.L   D3  
00001042                            40      
00001042  43F9 0000115C             41      LEA Mes_End_Adr,    A1  ;   ask ending loc  
00001048  103C 000E                 42      MOVE.B  #14,    D0       
0000104C  4E4F                      43      TRAP    #15 
0000104E                            44      
0000104E  43F9 000011C2             45      LEA EndLocData, A1  ;   get user input  
00001054  103C 0002                 46      MOVE.B  #2, D0  
00001058  4E4F                      47      Trap    #15 
0000105A                            48      
0000105A  4282                      49      CLR.L   D2  
0000105C  4283                      50      CLR.L   D3  
0000105E  4EB9 00001074             51      JSR ConvertInput    
00001064  23C3 000011C2             52      MOVE.L  D3, EndLocData
0000106A  2C79 000011C2             53      MOVE.L  EndLocData, A6  
00001070                            54      
00001070  6000 0088                 55      BRA Finish  
00001074                            56      
00001074                            57  *_______End of User Input Adr______________________________ 
00001074                            58  *   Subroutine
00001074                            59  *_________________________________________________
00001074                            60  ConvertInput        
00001074  1419                      61         MOVE.B  (A1)+,  D2   
00001076  4EB9 0000108C             62         JSR    ConvertASCII
0000107C  D682                      63         ADD.L    D2, D3  * copy D2 to D3       
0000107E  0C11 0000                 64         CMPI.B   #$0,    (A1)    
00001082  6700 0006                 65         BEQ GoBack
00001086                            66         *LSL.B    #4, D2     
00001086                            67         *LSR.B    #4, D2    
00001086  E98B                      68         LSL.L    #4, D3  * Make room for next byte   
00001088                            69         *ADD.L    D2, D3 
00001088  60EA                      70         BRA  ConvertInput
0000108A                            71  GoBack
0000108A  4E75                      72          RTS    
0000108C                            73         *LSR.B    
0000108C                            74  ConvertASCII
0000108C  0C02 0030                 75          CMPI.B  #$30,   D2     * Any input that are less than 30 is error    
00001090  6D00 0048                 76          BLT Input_Error_Handler
00001094  0C02 0067                 77          CMPI.B  #$67,   D2    * Any input that are more or equal to 67 (g) is error 
00001098  6C00 0040                 78          BGE Input_Error_Handler  
0000109C                            79          * 30~39 Number
0000109C                            80          * 41~46 Cap Letter Till F
0000109C                            81          * 61~66 Till f
0000109C  0C02 0039                 82          CMPI.B   #$39,   D2 * 40 is immeidate data use CMPI   
000010A0  6F00 0012                 83          BLE IsNumber * If less than 40 then execute  
000010A4                            84          *________________________________________________
000010A4  0C02 0040                 85          CMPI.B  #$40,   D2  *   if it is between 3A (:) and 40 (@) throw Error   
000010A8  6F00 0030                 86          BLE Input_Error_Handler
000010AC                            87          *_______________________________________________
000010AC  0C02 0041                 88          CMPI.B  #$41,   D2  * if not compare with 41 (A)    
000010B0  6C00 0008                 89          BGE IsLetter    *Bigger than or Equal to 41 then execute    
000010B4                            90  IsNumber
000010B4  0402 0030                 91          SUB.B   #$30,   D2        
000010B8  4E75                      92          RTS 
000010BA                            93  IsLetter
000010BA                            94          * figure out either small leter or capital letter   
000010BA  0C02 0046                 95          CMPI.B  #$46,   D2  * Compare with small letter F            
000010BE  6F00 0006                 96          BLE CapitalLetter   * if less or equal to 46 than small letter     
000010C2  6000 0008                 97          BRA SmallLetter     * else go to capital letter 
000010C6                            98  CapitalLetter   
000010C6                            99          *CMPI.B  #$40,   D2  
000010C6                           100          *BLE Input_Error_Handler 
000010C6  0402 0037                101          SUB.B   #$37,   D2   * 46 - 37 = F
000010CA  4E75                     102          RTS 
000010CC                           103  SmallLetter  
000010CC  0C02 0060                104          CMPI.B  #$60,   D2  * if less than or equal to 60 (') throw Error   
000010D0  6F00 0008                105          BLE Input_Error_Handler
000010D4  0402 0057                106          SUB.B   #$57,   D2    
000010D8  4E75                     107          RTS 
000010DA                           108          * tomorrow continue (less than 39) then subtract 30
000010DA                           109          
000010DA                           110  Input_Error_Handler
000010DA  6000 0002                111          BRA Invalid 
000010DE                           112          
000010DE                           113  Invalid 
000010DE  43F9 000011B7            114          LEA Extra_Space,    A1  
000010E4  103C 000E                115          MOVE.B  #14,    D0  
000010E8  4E4F                     116          TRAP    #15 
000010EA  43F9 0000117B            117          LEA Mes_Invalid, A1 
000010F0  103C 000E                118          MOVE.B  #14,    D0  
000010F4  4E4F                     119          TRAP    #15 
000010F6                           120          *MOVE.B  #9, D0    
000010F6                           121          *TRAP    #15
000010F6  6000 FF14                122          BRA  GetInputStartADR    
000010FA                           123           
000010FA  FFFF FFFF                124  Finish  SIMHALT             ; halt simulator
000010FE                           125  
000010FE                           126  *        RTS 
000010FE                           127        
000010FE                           128     
000010FE                           129  
000010FE                           130  * Put variables and constants here
000010FE                           131  * Basic Print Message   
000010FE                           132  *____________________________________________________________________
000010FE  =0000000D                133  CR  EQU $0D     *   Carriage Return
000010FE  =0000000A                134  LF  EQU $0A     *   Line Feed
000010FE                           135  
000010FE= 57 65 6C 63 6F 6D ...    136  Mes_Welcome     DC.B    'Welcome to Disassembler Program', CR,  LF
0000111F= 46 69 6E 61 6C 20 ...    137                              DC.B    'Final Project for CSS 422',    CR, LF, 0
0000113B= 50 6C 65 61 73 65 ...    138  Mes_Start_Adr       DC.B    'Please Enter Starting Location: ', 0
0000115C= 50 6C 65 61 73 65 ...    139  Mes_End_Adr     DC.B    'Please Enter Ending Location: ', 0
0000117B                           140  
0000117B= 54 68 65 20 41 64 ...    141  Mes_Invalid DC.B   'The Address You provided is Invalid', CR,  LF
000011A0= 54 65 72 6D 69 6E ...    142            DC.B 'Terminating Program.',  CR, LF, 0     
000011B7= 0D 0A 00                 143  Extra_Space DC.B    CR, LF, 0   
000011BA                           144  
000011BA                           145  * Define Storage
000011BA                           146  *_____________________________________________________________________
000011BA                           147  UserInput   DS.L    1   
000011BE                           148  StartLocData    DS.L    1   * store starting address
000011C2                           149  EndLocData  DS.L    1   *   Store ending address    
000011C6                           150  
000011C6                           151      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CAPITALLETTER       10C6
CONVERTASCII        108C
CONVERTINPUT        1074
CR                  D
ENDLOCDATA          11C2
EXTRA_SPACE         11B7
FINISH              10FA
GETINPUTENDADR      103E
GETINPUTSTARTADR    100C
GOBACK              108A
INPUT_ERROR_HANDLER  10DA
INVALID             10DE
ISLETTER            10BA
ISNUMBER            10B4
LF                  A
MES_END_ADR         115C
MES_INVALID         117B
MES_START_ADR       113B
MES_WELCOME         10FE
SMALLLETTER         10CC
START               1000
STARTLOCDATA        11BE
USERINPUT           11BA
